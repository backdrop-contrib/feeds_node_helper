<?php

/**
 * @file
 * Allow for mapping books, content types, uuid fields.
 */

/**
 * Implements feeds_feeds_processor_targets_alter().
 */
function feeds_node_helper_feeds_processor_targets_alter(&$target, $type, $bundle) {
  $target['uuid_book_parent'] = array(
    'name' => t('UUID Book Parent'),
    'description' => t('Create a book parent relationship based on UUID.'),
    'callback' => 'feeds_node_helper_feeds_set_uuid_book_parent_target',
  );
  $target['type'] = array(
    'name' => t('Node Type'),
    'description' => t('Map value to a content type.'),
    'callback' => 'feeds_node_helper_feeds_set_type_target',
  );
  $target['uuid'] = array(
    'name' => t('UUID'),
    'description' => t('Map value to UUID field.'),
    'callback' => 'feeds_node_helper_feeds_set_uuid_target',
  );
  $target['book_weight'] = array(
    'name' => t('Book Weight'),
    'description' => t('Map value to book weight.'),
    'callback' => 'feeds_node_helper_feeds_set_weight_target',
  );
  $target['uuid_book_bid'] = array(
    'name' => t('Book: bid'),
    'description' => t('Book root id target, makes a new one if item has no parent defined.'),
    'callback' => 'feeds_node_helper_feeds_set_uuid_book_bid_target',
  );
}

/**
 * Set the node uuid from an external system.
 */
function feeds_node_helper_feeds_set_uuid_target($source, $entity, $target, $value) {
  if (is_array($value)) {
    $value = $value[0];
  }
  $entity->uuid = $value;
}

/**
 * Set the node type.
 */
function feeds_node_helper_feeds_set_type_target($source, $entity, $target, $value) {
  if (is_array($value)) {
    $value = $value[0];
  }
  // Default to page if nothing is provided.
  if ($value == '') {
    $value = 'page';
  }
  $entity->type = $value;
}

/**
 * Set the book weight.
 */
function feeds_node_helper_feeds_set_weight_target($source, $entity, $target, $value) {
  if (is_array($value)) {
    $value = $value[0];
  }
  // Set the weight based on what it was previously.
  if ($value == '') {
    $value = 0;
  }
  $entity->book['weight'] = $value;
}

/**
 * Set the book to the group context
 */
function feeds_node_helper_feeds_set_uuid_book_bid_target($source, $entity, $target, $value) {
  // Load the parent from the UUID, it should have been created prior to creation.
  if (is_array($value)) {
    $value = $value[0];
  }
  if (empty($value)) {
    $entity->book['bid'] = 'new';
  }
  else {
    // Load the parent from the UUID, it should have been created prior to creation.
    module_load_include('inc', 'uuid', 'uuid.entity');
    $pnids = entity_get_id_by_uuid('node', array($value));
    if ($pnids[$value]) {
      // Load the full entity (node).
      $node = node_load($pnids[$value]);
      // Associate the parent correctly now that we've loaded the node.
      $entity->book['bid'] = $node->book['bid'];
      $entity->book['plid'] = $node->book['mlid'];
      $entity->book['menu_name'] = $node->book['menu_name'];
    }
  }
}

/**
 * Set the book parent, this assumes a UUID look up.
 */
function feeds_node_helper_feeds_set_uuid_book_parent_target($source, $entity, $target, $value) {
  // Load the parent from the UUID, it should have been created prior to creation.
  if (is_array($value)) {
    $value = $value[0];
  }
  module_load_include('inc', 'uuid', 'uuid.entity');
  $pnids = entity_get_id_by_uuid('node', array($value));
  if ($pnids[$value]) {
    // Load the full entity (node).
    $node = node_load($pnids[$value]);
    // Associate the parent correctly now that we've loaded the node.
    $entity->book['bid'] = $node->book['bid'];
    $entity->book['plid'] = $node->book['mlid'];
    $entity->book['menu_name'] = $node->book['menu_name'];
  }
}

/**
 * Implements hook_form_alter().
 */
function feeds_node_helper_form_alter(&$form, &$form_state, $form_id) {
  // Only apply to feeds import form.
  if ($form_id == 'feeds_import_form') {
    // Clone current GET environment.
    $args = $_GET;
    // Iterate through and scrub input.
    foreach ($args as $key => $val) {
      $args[$key] = filter_xss(check_plain($val));
    }
    // Append current arguments to the form.
    $form['feeds']['FeedsHTTPFetcher']['feeds_node_helper_args'] = array(
      '#type' => 'hidden',
      '#value' => serialize($args),
    );
  }
}

/**
 * Implements hook_feeds_tamper_plugins().
 */
function feeds_node_helper_feeds_tamper_plugins() {
  $info['userid'] = array(
    'form' => 'feeds_node_helper_userid_form',
    'callback' => 'feeds_node_helper_userid_callback',
    'name' => 'Current User ID',
    'multi' => 'single',
    'category' => 'Transform',
    'description' => 'Set the value to the currently logged-in user.',
  );
  $info['convert_to_get'] = array(
    'form' => 'feeds_node_helper_convert_to_get_form',
    'callback' => 'feeds_node_helper_convert_to_get_callback',
    'name' => 'Convert to GET value',
    'multi' => 'single',
    'category' => 'Transform',
    'description' => 'Set the value to a variable in the address',
  );

  foreach($info as $k => $v) {
    $info[$k]['handler'] = array(
      'file_type' => 'inc',
      'file_name' => $k,
      'path' => 'plugins/',
      'module' => 'feeds_node_helper',
    );
  }

  return $info;
}
